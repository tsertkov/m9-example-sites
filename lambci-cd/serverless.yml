service: ${file(config.json):common.project}-deploy

custom:
  stage: ${opt:stage, "staging"}
  config: ${file(config.json)}
  table: ${self:service}-${self:custom.stage}-deploy
  deployFnName: ${self:service}-${self:custom.stage}-deploy
  deployTimeout: 180

provider:
  name: aws
  stage: ${self:custom.stage}
  runtime: nodejs8.10
  region: ${self:custom.config.common.region}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource:
        - "arn:aws:lambda:${self:provider.region}:*:function:${self:custom.deployFnName}"
    - Effect: "Allow"
      Action:
        - "dynamodb:GetRecords"
        - "dynamodb:GetShardIterator"
        - "dynamodb:DescribeStream"
        - "dynamodb:ListStreams"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.table}"
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
        - "s3:GetObject"
        - "s3:PutObject"
        - "s3:DeleteObject"
        - "s3:PutObjectAcl"
      Resource:
        - "arn:aws:s3:::${self:custom.stage}.${self:custom.config.common.domain}"
        - "arn:aws:s3:::${self:custom.stage}.${self:custom.config.common.domain}/*"
    - Effect: "Allow"
      Action:
        - "cloudfront:CreateInvalidation"
      Resource:
        - "*"
  apiKeys:
    - ${self:service}-${self:custom.stage}
  environment:
    STAGE: ${self:custom.stage}
    TABLE: ${self:custom.table}
    DEPLOY_FN_NAME: ${self:custom.deployFnName}
    DEPLOY_TIMEOUT: ${self:custom.deployTimeout}

resources:
  Resources:
    DeployTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.table}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

package:
  individually: true
  exclude:
    - build/**
    - node_modules/aws-sdk/**

functions:
  deploy:
    name: ${self:custom.deployFnName}
    description: "Run m9 deploy"
    handler: serverless/deploy.deploy
    reservedConcurrency: 1
    memorySize: 3008
    timeout: ${self:custom.deployTimeout}
    package:
      exclude:
        - ./**
        - node_modules/aws-sdk/**
      include:
        - node_modules/**
        - serverless/**
        - src/**
  processDbEvent:
    description: "Deploy job queue consumer running static site deploy task"
    handler: serverless/process-db-event.processDbEvent
    reservedConcurrency: 1
    memorySize: 128
    timeout: 6
    package:
      exclude:
        - ./**
      include:
        - serverless/**
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - DeployTable
              - StreamArn
          batchSize: 100
  scheduleDeployJob:
    description: "Schedules deploy job"
    handler: serverless/schedule-deploy-job.scheduleDeployJob
    memorySize: 128
    timeout: 6
    package:
      exclude:
        - ./**
      include:
        - serverless/**
    events:
      - http:
          path: deploy
          method: get
          private: true
